package com.zs.project.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_DATA".
*/
public class NewDataDao extends AbstractDao<NewData, String> {

    public static final String TABLENAME = "NEW_DATA";

    /**
     * Properties of entity NewData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Src = new Property(0, String.class, "src", false, "SRC");
        public final static Property Weburl = new Property(1, String.class, "weburl", false, "WEBURL");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Pic = new Property(3, String.class, "pic", false, "PIC");
        public final static Property Title = new Property(4, String.class, "title", true, "TITLE");
        public final static Property Category = new Property(5, String.class, "category", false, "CATEGORY");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
    }


    public NewDataDao(DaoConfig config) {
        super(config);
    }
    
    public NewDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_DATA\" (" + //
                "\"SRC\" TEXT," + // 0: src
                "\"WEBURL\" TEXT," + // 1: weburl
                "\"TIME\" TEXT," + // 2: time
                "\"PIC\" TEXT," + // 3: pic
                "\"TITLE\" TEXT PRIMARY KEY NOT NULL ," + // 4: title
                "\"CATEGORY\" TEXT," + // 5: category
                "\"URL\" TEXT);"); // 6: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewData entity) {
        stmt.clearBindings();
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(1, src);
        }
 
        String weburl = entity.getWeburl();
        if (weburl != null) {
            stmt.bindString(2, weburl);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(6, category);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewData entity) {
        stmt.clearBindings();
 
        String src = entity.getSrc();
        if (src != null) {
            stmt.bindString(1, src);
        }
 
        String weburl = entity.getWeburl();
        if (weburl != null) {
            stmt.bindString(2, weburl);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(6, category);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    @Override
    public NewData readEntity(Cursor cursor, int offset) {
        NewData entity = new NewData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // src
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // weburl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // category
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewData entity, int offset) {
        entity.setSrc(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWeburl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategory(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NewData entity, long rowId) {
        return entity.getTitle();
    }
    
    @Override
    public String getKey(NewData entity) {
        if(entity != null) {
            return entity.getTitle();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewData entity) {
        return entity.getTitle() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
