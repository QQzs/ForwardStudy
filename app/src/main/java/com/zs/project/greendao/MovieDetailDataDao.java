package com.zs.project.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zs.project.bean.movie.MovieImages;
import com.zs.project.bean.movie.MovieRating;
import com.zs.project.greendao.convert.MovieCastsConvert;
import com.zs.project.greendao.convert.MovieImagesConvert;
import com.zs.project.greendao.convert.MovieRatingConvert;
import com.zs.project.greendao.convert.StringConvert;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE_DETAIL_DATA".
*/
public class MovieDetailDataDao extends AbstractDao<MovieDetailData, Long> {

    public static final String TABLENAME = "MOVIE_DETAIL_DATA";

    /**
     * Properties of entity MovieDetailData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Rating = new Property(2, String.class, "rating", false, "RATING");
        public final static Property Year = new Property(3, String.class, "year", false, "YEAR");
        public final static Property Images = new Property(4, String.class, "images", false, "IMAGES");
        public final static Property Alt = new Property(5, String.class, "alt", false, "ALT");
        public final static Property Mobile_url = new Property(6, String.class, "mobile_url", false, "MOBILE_URL");
        public final static Property Share_url = new Property(7, String.class, "share_url", false, "SHARE_URL");
        public final static Property Schedule_url = new Property(8, String.class, "schedule_url", false, "SCHEDULE_URL");
        public final static Property Collect_count = new Property(9, String.class, "collect_count", false, "COLLECT_COUNT");
        public final static Property Comments_count = new Property(10, String.class, "comments_count", false, "COMMENTS_COUNT");
        public final static Property Ratings_count = new Property(11, String.class, "ratings_count", false, "RATINGS_COUNT");
        public final static Property Original_title = new Property(12, String.class, "original_title", false, "ORIGINAL_TITLE");
        public final static Property Summary = new Property(13, String.class, "summary", false, "SUMMARY");
        public final static Property Countries = new Property(14, String.class, "countries", false, "COUNTRIES");
        public final static Property Genres = new Property(15, String.class, "genres", false, "GENRES");
        public final static Property Aka = new Property(16, String.class, "aka", false, "AKA");
        public final static Property Casts = new Property(17, String.class, "casts", false, "CASTS");
        public final static Property Directors = new Property(18, String.class, "directors", false, "DIRECTORS");
    }

    private final MovieRatingConvert ratingConverter = new MovieRatingConvert();
    private final MovieImagesConvert imagesConverter = new MovieImagesConvert();
    private final StringConvert countriesConverter = new StringConvert();
    private final StringConvert genresConverter = new StringConvert();
    private final StringConvert akaConverter = new StringConvert();
    private final MovieCastsConvert castsConverter = new MovieCastsConvert();
    private final MovieCastsConvert directorsConverter = new MovieCastsConvert();

    public MovieDetailDataDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDetailDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_DETAIL_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"RATING\" TEXT," + // 2: rating
                "\"YEAR\" TEXT," + // 3: year
                "\"IMAGES\" TEXT," + // 4: images
                "\"ALT\" TEXT," + // 5: alt
                "\"MOBILE_URL\" TEXT," + // 6: mobile_url
                "\"SHARE_URL\" TEXT," + // 7: share_url
                "\"SCHEDULE_URL\" TEXT," + // 8: schedule_url
                "\"COLLECT_COUNT\" TEXT," + // 9: collect_count
                "\"COMMENTS_COUNT\" TEXT," + // 10: comments_count
                "\"RATINGS_COUNT\" TEXT," + // 11: ratings_count
                "\"ORIGINAL_TITLE\" TEXT," + // 12: original_title
                "\"SUMMARY\" TEXT," + // 13: summary
                "\"COUNTRIES\" TEXT," + // 14: countries
                "\"GENRES\" TEXT," + // 15: genres
                "\"AKA\" TEXT," + // 16: aka
                "\"CASTS\" TEXT," + // 17: casts
                "\"DIRECTORS\" TEXT);"); // 18: directors
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_DETAIL_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MovieDetailData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        MovieRating rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(3, ratingConverter.convertToDatabaseValue(rating));
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(4, year);
        }
 
        MovieImages images = entity.getImages();
        if (images != null) {
            stmt.bindString(5, imagesConverter.convertToDatabaseValue(images));
        }
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(6, alt);
        }
 
        String mobile_url = entity.getMobile_url();
        if (mobile_url != null) {
            stmt.bindString(7, mobile_url);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(8, share_url);
        }
 
        String schedule_url = entity.getSchedule_url();
        if (schedule_url != null) {
            stmt.bindString(9, schedule_url);
        }
 
        String collect_count = entity.getCollect_count();
        if (collect_count != null) {
            stmt.bindString(10, collect_count);
        }
 
        String comments_count = entity.getComments_count();
        if (comments_count != null) {
            stmt.bindString(11, comments_count);
        }
 
        String ratings_count = entity.getRatings_count();
        if (ratings_count != null) {
            stmt.bindString(12, ratings_count);
        }
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(13, original_title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(14, summary);
        }
 
        List countries = entity.getCountries();
        if (countries != null) {
            stmt.bindString(15, countriesConverter.convertToDatabaseValue(countries));
        }
 
        List genres = entity.getGenres();
        if (genres != null) {
            stmt.bindString(16, genresConverter.convertToDatabaseValue(genres));
        }
 
        List aka = entity.getAka();
        if (aka != null) {
            stmt.bindString(17, akaConverter.convertToDatabaseValue(aka));
        }
 
        List casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(18, castsConverter.convertToDatabaseValue(casts));
        }
 
        List directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(19, directorsConverter.convertToDatabaseValue(directors));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MovieDetailData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        MovieRating rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(3, ratingConverter.convertToDatabaseValue(rating));
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(4, year);
        }
 
        MovieImages images = entity.getImages();
        if (images != null) {
            stmt.bindString(5, imagesConverter.convertToDatabaseValue(images));
        }
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(6, alt);
        }
 
        String mobile_url = entity.getMobile_url();
        if (mobile_url != null) {
            stmt.bindString(7, mobile_url);
        }
 
        String share_url = entity.getShare_url();
        if (share_url != null) {
            stmt.bindString(8, share_url);
        }
 
        String schedule_url = entity.getSchedule_url();
        if (schedule_url != null) {
            stmt.bindString(9, schedule_url);
        }
 
        String collect_count = entity.getCollect_count();
        if (collect_count != null) {
            stmt.bindString(10, collect_count);
        }
 
        String comments_count = entity.getComments_count();
        if (comments_count != null) {
            stmt.bindString(11, comments_count);
        }
 
        String ratings_count = entity.getRatings_count();
        if (ratings_count != null) {
            stmt.bindString(12, ratings_count);
        }
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(13, original_title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(14, summary);
        }
 
        List countries = entity.getCountries();
        if (countries != null) {
            stmt.bindString(15, countriesConverter.convertToDatabaseValue(countries));
        }
 
        List genres = entity.getGenres();
        if (genres != null) {
            stmt.bindString(16, genresConverter.convertToDatabaseValue(genres));
        }
 
        List aka = entity.getAka();
        if (aka != null) {
            stmt.bindString(17, akaConverter.convertToDatabaseValue(aka));
        }
 
        List casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(18, castsConverter.convertToDatabaseValue(casts));
        }
 
        List directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(19, directorsConverter.convertToDatabaseValue(directors));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MovieDetailData readEntity(Cursor cursor, int offset) {
        MovieDetailData entity = new MovieDetailData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : ratingConverter.convertToEntityProperty(cursor.getString(offset + 2)), // rating
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // year
            cursor.isNull(offset + 4) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 4)), // images
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // alt
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobile_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // share_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // schedule_url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // collect_count
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // comments_count
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ratings_count
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // original_title
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // summary
            cursor.isNull(offset + 14) ? null : countriesConverter.convertToEntityProperty(cursor.getString(offset + 14)), // countries
            cursor.isNull(offset + 15) ? null : genresConverter.convertToEntityProperty(cursor.getString(offset + 15)), // genres
            cursor.isNull(offset + 16) ? null : akaConverter.convertToEntityProperty(cursor.getString(offset + 16)), // aka
            cursor.isNull(offset + 17) ? null : castsConverter.convertToEntityProperty(cursor.getString(offset + 17)), // casts
            cursor.isNull(offset + 18) ? null : directorsConverter.convertToEntityProperty(cursor.getString(offset + 18)) // directors
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MovieDetailData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRating(cursor.isNull(offset + 2) ? null : ratingConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setYear(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImages(cursor.isNull(offset + 4) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setAlt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobile_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShare_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSchedule_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCollect_count(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComments_count(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRatings_count(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOriginal_title(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSummary(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCountries(cursor.isNull(offset + 14) ? null : countriesConverter.convertToEntityProperty(cursor.getString(offset + 14)));
        entity.setGenres(cursor.isNull(offset + 15) ? null : genresConverter.convertToEntityProperty(cursor.getString(offset + 15)));
        entity.setAka(cursor.isNull(offset + 16) ? null : akaConverter.convertToEntityProperty(cursor.getString(offset + 16)));
        entity.setCasts(cursor.isNull(offset + 17) ? null : castsConverter.convertToEntityProperty(cursor.getString(offset + 17)));
        entity.setDirectors(cursor.isNull(offset + 18) ? null : directorsConverter.convertToEntityProperty(cursor.getString(offset + 18)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MovieDetailData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MovieDetailData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MovieDetailData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
