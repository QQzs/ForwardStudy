package com.zs.project.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zs.project.greendao.convert.ImgextraConvert;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE_DATA".
*/
public class ArticleDataDao extends AbstractDao<ArticleData, Long> {

    public static final String TABLENAME = "ARTICLE_DATA";

    /**
     * Properties of entity ArticleData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modelmode = new Property(1, String.class, "modelmode", false, "MODELMODE");
        public final static Property HasImg = new Property(2, String.class, "hasImg", false, "HAS_IMG");
        public final static Property Digest = new Property(3, String.class, "digest", false, "DIGEST");
        public final static Property SkipType = new Property(4, String.class, "skipType", false, "SKIP_TYPE");
        public final static Property CommentCount = new Property(5, String.class, "commentCount", false, "COMMENT_COUNT");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Docid = new Property(7, String.class, "docid", false, "DOCID");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property Source = new Property(9, String.class, "source", false, "SOURCE");
        public final static Property Priority = new Property(10, int.class, "priority", false, "PRIORITY");
        public final static Property LiveInfo = new Property(11, String.class, "liveInfo", false, "LIVE_INFO");
        public final static Property SkipURL = new Property(12, String.class, "skipURL", false, "SKIP_URL");
        public final static Property Imgsrc = new Property(13, String.class, "imgsrc", false, "IMGSRC");
        public final static Property Stitle = new Property(14, String.class, "stitle", false, "STITLE");
        public final static Property PhotosetID = new Property(15, String.class, "photosetID", false, "PHOTOSET_ID");
        public final static Property Ptime = new Property(16, String.class, "ptime", false, "PTIME");
        public final static Property Imgsrc3gtype = new Property(17, String.class, "imgsrc3gtype", false, "IMGSRC3GTYPE");
        public final static Property Imgextra = new Property(18, String.class, "imgextra", false, "IMGEXTRA");
    }

    private final ImgextraConvert imgextraConverter = new ImgextraConvert();

    public ArticleDataDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MODELMODE\" TEXT," + // 1: modelmode
                "\"HAS_IMG\" TEXT," + // 2: hasImg
                "\"DIGEST\" TEXT," + // 3: digest
                "\"SKIP_TYPE\" TEXT," + // 4: skipType
                "\"COMMENT_COUNT\" TEXT," + // 5: commentCount
                "\"URL\" TEXT," + // 6: url
                "\"DOCID\" TEXT," + // 7: docid
                "\"TITLE\" TEXT," + // 8: title
                "\"SOURCE\" TEXT," + // 9: source
                "\"PRIORITY\" INTEGER NOT NULL ," + // 10: priority
                "\"LIVE_INFO\" TEXT," + // 11: liveInfo
                "\"SKIP_URL\" TEXT," + // 12: skipURL
                "\"IMGSRC\" TEXT," + // 13: imgsrc
                "\"STITLE\" TEXT," + // 14: stitle
                "\"PHOTOSET_ID\" TEXT," + // 15: photosetID
                "\"PTIME\" TEXT," + // 16: ptime
                "\"IMGSRC3GTYPE\" TEXT," + // 17: imgsrc3gtype
                "\"IMGEXTRA\" TEXT);"); // 18: imgextra
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String modelmode = entity.getModelmode();
        if (modelmode != null) {
            stmt.bindString(2, modelmode);
        }
 
        String hasImg = entity.getHasImg();
        if (hasImg != null) {
            stmt.bindString(3, hasImg);
        }
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(4, digest);
        }
 
        String skipType = entity.getSkipType();
        if (skipType != null) {
            stmt.bindString(5, skipType);
        }
 
        String commentCount = entity.getCommentCount();
        if (commentCount != null) {
            stmt.bindString(6, commentCount);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String docid = entity.getDocid();
        if (docid != null) {
            stmt.bindString(8, docid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(10, source);
        }
        stmt.bindLong(11, entity.getPriority());
 
        String liveInfo = entity.getLiveInfo();
        if (liveInfo != null) {
            stmt.bindString(12, liveInfo);
        }
 
        String skipURL = entity.getSkipURL();
        if (skipURL != null) {
            stmt.bindString(13, skipURL);
        }
 
        String imgsrc = entity.getImgsrc();
        if (imgsrc != null) {
            stmt.bindString(14, imgsrc);
        }
 
        String stitle = entity.getStitle();
        if (stitle != null) {
            stmt.bindString(15, stitle);
        }
 
        String photosetID = entity.getPhotosetID();
        if (photosetID != null) {
            stmt.bindString(16, photosetID);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(17, ptime);
        }
 
        String imgsrc3gtype = entity.getImgsrc3gtype();
        if (imgsrc3gtype != null) {
            stmt.bindString(18, imgsrc3gtype);
        }
 
        List imgextra = entity.getImgextra();
        if (imgextra != null) {
            stmt.bindString(19, imgextraConverter.convertToDatabaseValue(imgextra));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String modelmode = entity.getModelmode();
        if (modelmode != null) {
            stmt.bindString(2, modelmode);
        }
 
        String hasImg = entity.getHasImg();
        if (hasImg != null) {
            stmt.bindString(3, hasImg);
        }
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(4, digest);
        }
 
        String skipType = entity.getSkipType();
        if (skipType != null) {
            stmt.bindString(5, skipType);
        }
 
        String commentCount = entity.getCommentCount();
        if (commentCount != null) {
            stmt.bindString(6, commentCount);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String docid = entity.getDocid();
        if (docid != null) {
            stmt.bindString(8, docid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(10, source);
        }
        stmt.bindLong(11, entity.getPriority());
 
        String liveInfo = entity.getLiveInfo();
        if (liveInfo != null) {
            stmt.bindString(12, liveInfo);
        }
 
        String skipURL = entity.getSkipURL();
        if (skipURL != null) {
            stmt.bindString(13, skipURL);
        }
 
        String imgsrc = entity.getImgsrc();
        if (imgsrc != null) {
            stmt.bindString(14, imgsrc);
        }
 
        String stitle = entity.getStitle();
        if (stitle != null) {
            stmt.bindString(15, stitle);
        }
 
        String photosetID = entity.getPhotosetID();
        if (photosetID != null) {
            stmt.bindString(16, photosetID);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(17, ptime);
        }
 
        String imgsrc3gtype = entity.getImgsrc3gtype();
        if (imgsrc3gtype != null) {
            stmt.bindString(18, imgsrc3gtype);
        }
 
        List imgextra = entity.getImgextra();
        if (imgextra != null) {
            stmt.bindString(19, imgextraConverter.convertToDatabaseValue(imgextra));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ArticleData readEntity(Cursor cursor, int offset) {
        ArticleData entity = new ArticleData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // modelmode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hasImg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // digest
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // skipType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // commentCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // docid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // source
            cursor.getInt(offset + 10), // priority
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // liveInfo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // skipURL
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // imgsrc
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // stitle
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // photosetID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ptime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // imgsrc3gtype
            cursor.isNull(offset + 18) ? null : imgextraConverter.convertToEntityProperty(cursor.getString(offset + 18)) // imgextra
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModelmode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHasImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDigest(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSkipType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommentCount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDocid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSource(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPriority(cursor.getInt(offset + 10));
        entity.setLiveInfo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSkipURL(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImgsrc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStitle(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPhotosetID(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPtime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setImgsrc3gtype(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setImgextra(cursor.isNull(offset + 18) ? null : imgextraConverter.convertToEntityProperty(cursor.getString(offset + 18)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArticleData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArticleData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ArticleData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
